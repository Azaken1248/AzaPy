export const PYTHON_COMPLETIONS = [

  { value: 'def', type: 'Keyword', desc: 'Define a function.' },
  { value: 'class', type: 'Keyword', desc: 'Define a class.' },
  { value: 'if', type: 'Keyword', desc: 'Conditional statement.' },
  { value: 'elif', type: 'Keyword', desc: 'Conditional statement.' },
  { value: 'else', type: 'Keyword', desc: 'Conditional statement.' },
  { value: 'for', type: 'Keyword', desc: 'Loop statement.' },
  { value: 'while', type: 'Keyword', desc: 'Loop statement.' },
  { value: 'try', type: 'Keyword', desc: 'Exception handling block.' },
  { value: 'except', type: 'Keyword', desc: 'Catch exceptions.' },
  { value: 'finally', type: 'Keyword', desc: 'Cleanup block.' },
  { value: 'with', type: 'Keyword', desc: 'Context manager.' },
  { value: 'return', type: 'Keyword', desc: 'Return from function.' },
  { value: 'yield', type: 'Keyword', desc: 'Yield from generator.' },
  { value: 'import', type: 'Keyword', desc: 'Import a module.' },
  { value: 'from', type: 'Keyword', desc: 'Import specific parts.' },
  { value: 'as', type: 'Keyword', desc: 'Alias an import.' },
  { value: 'in', type: 'Keyword', desc: 'Membership operator.' },
  { value: 'and', type: 'Keyword', desc: 'Logical operator.' },
  { value: 'or', type: 'Keyword', desc: 'Logical operator.' },
  { value: 'not', type: 'Keyword', desc: 'Logical operator.' },
  { value: 'is', type: 'Keyword', desc: 'Identity operator.' },
  { value: 'pass', type: 'Keyword', desc: 'Null operation.' },
  { value: 'break', type: 'Keyword', desc: 'Exit a loop.' },
  { value: 'continue', type: 'Keyword', desc: 'Continue to next iteration.' },
  { value: 'lambda', type: 'Keyword', desc: 'Anonymous function.' },
  { value: 'assert', type: 'Keyword', desc: 'Assertion.' },
  { value: 'async', type: 'Keyword', desc: 'Define async function.' },
  { value: 'await', type: 'Keyword', desc: 'Await a coroutine.' },
  { value: 'del', type: 'Keyword', desc: 'Delete an object.' },
  { value: 'global', type: 'Keyword', desc: 'Declare global variable.' },
  { value: 'nonlocal', type: 'Keyword', desc: 'Declare nonlocal variable.' },
  { value: 'raise', type: 'Keyword', desc: 'Raise an exception.' },

  { value: 'True', type: 'Constant' },
  { value: 'False', type: 'Constant' },
  { value: 'None', type: 'Constant' },
  { value: 'self', type: 'Convention', desc: 'Instance reference.' },


  { value: 'print', type: 'Function' },
  { value: 'len', type: 'Function' },
  { value: 'range', type: 'Function' },
  { value: 'abs', type: 'Function' },
  { value: 'all', type: 'Function' },
  { value: 'any', type: 'Function' },
  { value: 'bin', type: 'Function' },
  { value: 'callable', type: 'Function' },
  { value: 'chr', type: 'Function' },
  { value: 'dir', type: 'Function' },
  { value: 'divmod', type: 'Function' },
  { value: 'enumerate', type: 'Function' },
  { value: 'eval', type: 'Function' },
  { value: 'exec', type: 'Function' },
  { value: 'filter', type: 'Function' },
  { value: 'format', type: 'Function' },
  { value: 'getattr', type: 'Function' },
  { value: 'globals', type: 'Function' },
  { value: 'hasattr', type: 'Function' },
  { value: 'hash', type: 'Function' },
  { value: 'help', type: 'Function' },
  { value: 'hex', type: 'Function' },
  { value: 'id', type: 'Function' },
  { value: 'input', type: 'Function' },
  { value: 'isinstance', type: 'Function' },
  { value: 'issubclass', type: 'Function' },
  { value: 'iter', type: 'Function' },
  { value: 'locals', type: 'Function' },
  { value: 'map', type: 'Function' },
  { value: 'max', type: 'Function' },
  { value: 'min', type: 'Function' },
  { value: 'next', type: 'Function' },
  { value: 'oct', type: 'Function' },
  { value: 'open', type: 'Function' },
  { value: 'ord', type: 'Function' },
  { value: 'pow', type: 'Function' },
  { value: 'repr', type: 'Function' },
  { value: 'reversed', type: 'Function' },
  { value: 'round', type: 'Function' },
  { value: 'setattr', type: 'Function' },
  { value: 'slice', type: 'Function' },
  { value: 'sorted', type: 'Function' },
  { value: 'sum', type: 'Function' },
  { value: 'super', type: 'Function' },
  { value: 'vars', type: 'Function' },
  { value: 'zip', type: 'Function' },

  { value: 'str', type: 'Type' },
  { value: 'int', type: 'Type' },
  { value: 'float', type: 'Type' },
  { value: 'list', type: 'Type' },
  { value: 'dict', type: 'Type' },
  { value: 'set', type: 'Type' },
  { value: 'tuple', type: 'Type' },
  { value: 'bool', type: 'Type' },
  { value: 'bytes', type: 'Type' },
  { value: 'complex', type: 'Type' },
  { value: 'frozenset', type: 'Type' },
  { value: 'object', type: 'Type' },
  { value: 'type', type: 'Type' },

  { value: 'classmethod', type: 'Decorator' },
  { value: 'staticmethod', type: 'Decorator' },
  { value: 'property', type: 'Decorator' },


  { value: 'Exception', type: 'Exception' },
  { value: 'AttributeError', type: 'Exception' },
  { value: 'EOFError', type: 'Exception' },
  { value: 'FileNotFoundError', type: 'Exception' },
  { value: 'ImportError', type: 'Exception' },
  { value: 'IndentationError', type: 'Exception' },
  { value: 'IndexError', type: 'Exception' },
  { value: 'KeyError', type: 'Exception' },
  { value: 'KeyboardInterrupt', type: 'Exception' },
  { value: 'MemoryError', type: 'Exception' },
  { value: 'ModuleNotFoundError', type: 'Exception' },
  { value: 'NameError', type: 'Exception' },
  { value: 'OSError', type: 'Exception' },
  { value: 'OverflowError', type: 'Exception' },
  { value: 'PermissionError', type: 'Exception' },
  { value: 'RuntimeError', type: 'Exception' },
  { value: 'StopIteration', type: 'Exception' },
  { value: 'SyntaxError', type: 'Exception' },
  { value: 'TypeError', type: 'Exception' },
  { value: 'ValueError', type: 'Exception' },
  { value: 'ZeroDivisionError', type: 'Exception' },

  { value: 'os', type: 'Module' },
  { value: 'sys', type: 'Module' },
  { value: 'math', type: 'Module' },
  { value: 'json', type: 'Module' },
  { value: 'datetime', type: 'Module' },
  { value: 'time', type: 'Module' },
  { value: 're', type: 'Module', desc: 'Regular expressions.' },
  { value: 'collections', type: 'Module' },
  { value: 'pathlib', type: 'Module' },
  { value: 'random', type: 'Module' },
  { value: 'itertools', type: 'Module' },
  { value: 'functools', type: 'Module' },
  { value: 'logging', type: 'Module' },
  { value: 'unittest', type: 'Module' },
  { value: 'argparse', type: 'Module' },
  { value: 'subprocess', type: 'Module' },
];